"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sonner";
exports.ids = ["vendor-chunks/sonner"];
exports.modules = {

/***/ "(ssr)/./node_modules/sonner/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/sonner/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Toaster: () => (/* binding */ Toaster),\n/* harmony export */   toast: () => (/* binding */ toast),\n/* harmony export */   useSonner: () => (/* binding */ useSonner)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ Toaster,toast,useSonner auto */ var _excluded = [\n    \"message\"\n];\nfunction _regeneratorRuntime() {\n    \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ \n    _regeneratorRuntime = function _regeneratorRuntime() {\n        return e;\n    };\n    var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t, e, r) {\n        t[e] = r.value;\n    }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\";\n    function define(t, e, r) {\n        return Object.defineProperty(t, e, {\n            value: r,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }), t[e];\n    }\n    try {\n        define({}, \"\");\n    } catch (t) {\n        define = function define(t, e, r) {\n            return t[e] = r;\n        };\n    }\n    function wrap(t, e, r, n) {\n        var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []);\n        return o(a, \"_invoke\", {\n            value: makeInvokeMethod(t, r, c)\n        }), a;\n    }\n    function tryCatch(t, e, r) {\n        try {\n            return {\n                type: \"normal\",\n                arg: t.call(e, r)\n            };\n        } catch (t) {\n            return {\n                type: \"throw\",\n                arg: t\n            };\n        }\n    }\n    e.wrap = wrap;\n    var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {};\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    var p = {};\n    define(p, a, function() {\n        return this;\n    });\n    var d = Object.getPrototypeOf, v = d && d(d(values([])));\n    v && v !== r && n.call(v, a) && (p = v);\n    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n    function defineIteratorMethods(t) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(e) {\n            define(t, e, function(t) {\n                return this._invoke(e, t);\n            });\n        });\n    }\n    function AsyncIterator(t, e) {\n        function invoke(r, o, i, a) {\n            var c = tryCatch(t[r], t, o);\n            if (\"throw\" !== c.type) {\n                var u = c.arg, h = u.value;\n                return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function(t) {\n                    invoke(\"next\", t, i, a);\n                }, function(t) {\n                    invoke(\"throw\", t, i, a);\n                }) : e.resolve(h).then(function(t) {\n                    u.value = t, i(u);\n                }, function(t) {\n                    return invoke(\"throw\", t, i, a);\n                });\n            }\n            a(c.arg);\n        }\n        var r;\n        o(this, \"_invoke\", {\n            value: function value(t, n) {\n                function callInvokeWithMethodAndArg() {\n                    return new e(function(e, r) {\n                        invoke(t, n, e, r);\n                    });\n                }\n                return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n            }\n        });\n    }\n    function makeInvokeMethod(e, r, n) {\n        var o = h;\n        return function(i, a) {\n            if (o === f) throw new Error(\"Generator is already running\");\n            if (o === s) {\n                if (\"throw\" === i) throw a;\n                return {\n                    value: t,\n                    done: !0\n                };\n            }\n            for(n.method = i, n.arg = a;;){\n                var c = n.delegate;\n                if (c) {\n                    var u = maybeInvokeDelegate(c, n);\n                    if (u) {\n                        if (u === y) continue;\n                        return u;\n                    }\n                }\n                if (\"next\" === n.method) n.sent = n._sent = n.arg;\n                else if (\"throw\" === n.method) {\n                    if (o === h) throw o = s, n.arg;\n                    n.dispatchException(n.arg);\n                } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n                o = f;\n                var p = tryCatch(e, r, n);\n                if (\"normal\" === p.type) {\n                    if (o = n.done ? s : l, p.arg === y) continue;\n                    return {\n                        value: p.arg,\n                        done: n.done\n                    };\n                }\n                \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n            }\n        };\n    }\n    function maybeInvokeDelegate(e, r) {\n        var n = r.method, o = e.iterator[n];\n        if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n        var i = tryCatch(o, e.iterator, r.arg);\n        if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n        var a = i.arg;\n        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n    }\n    function pushTryEntry(t) {\n        var e = {\n            tryLoc: t[0]\n        };\n        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n    }\n    function resetTryEntry(t) {\n        var e = t.completion || {};\n        e.type = \"normal\", delete e.arg, t.completion = e;\n    }\n    function Context(t) {\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ], t.forEach(pushTryEntry, this), this.reset(!0);\n    }\n    function values(e) {\n        if (e || \"\" === e) {\n            var r = e[a];\n            if (r) return r.call(e);\n            if (\"function\" == typeof e.next) return e;\n            if (!isNaN(e.length)) {\n                var o = -1, i = function next() {\n                    for(; ++o < e.length;)if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n                    return next.value = t, next.done = !0, next;\n                };\n                return i.next = i;\n            }\n        }\n        throw new TypeError(_typeof(e) + \" is not iterable\");\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: !0\n    }), o(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: !0\n    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function(t) {\n        var e = \"function\" == typeof t && t.constructor;\n        return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n    }, e.mark = function(t) {\n        return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n    }, e.awrap = function(t) {\n        return {\n            __await: t\n        };\n    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {\n        return this;\n    }), e.AsyncIterator = AsyncIterator, e.async = function(t, r, n, o, i) {\n        void 0 === i && (i = Promise);\n        var a = new AsyncIterator(wrap(t, r, n, o), i);\n        return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {\n            return t.done ? t.value : a.next();\n        });\n    }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function() {\n        return this;\n    }), define(g, \"toString\", function() {\n        return \"[object Generator]\";\n    }), e.keys = function(t) {\n        var e = Object(t), r = [];\n        for(var n in e)r.push(n);\n        return r.reverse(), function next() {\n            for(; r.length;){\n                var t = r.pop();\n                if (t in e) return next.value = t, next.done = !1, next;\n            }\n            return next.done = !0, next;\n        };\n    }, e.values = values, Context.prototype = {\n        constructor: Context,\n        reset: function reset(e) {\n            if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for(var r in this)\"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n        },\n        stop: function stop() {\n            this.done = !0;\n            var t = this.tryEntries[0].completion;\n            if (\"throw\" === t.type) throw t.arg;\n            return this.rval;\n        },\n        dispatchException: function dispatchException(e) {\n            if (this.done) throw e;\n            var r = this;\n            function handle(n, o) {\n                return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n            }\n            for(var o = this.tryEntries.length - 1; o >= 0; --o){\n                var i = this.tryEntries[o], a = i.completion;\n                if (\"root\" === i.tryLoc) return handle(\"end\");\n                if (i.tryLoc <= this.prev) {\n                    var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\");\n                    if (c && u) {\n                        if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                        if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                    } else if (c) {\n                        if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n                    } else {\n                        if (!u) throw new Error(\"try statement without catch or finally\");\n                        if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n                    }\n                }\n            }\n        },\n        abrupt: function abrupt(t, e) {\n            for(var r = this.tryEntries.length - 1; r >= 0; --r){\n                var o = this.tryEntries[r];\n                if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n                    var i = o;\n                    break;\n                }\n            }\n            i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n            var a = i ? i.completion : {};\n            return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n        },\n        complete: function complete(t, e) {\n            if (\"throw\" === t.type) throw t.arg;\n            return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n        },\n        finish: function finish(t) {\n            for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                var r = this.tryEntries[e];\n                if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n            }\n        },\n        \"catch\": function _catch(t) {\n            for(var e = this.tryEntries.length - 1; e >= 0; --e){\n                var r = this.tryEntries[e];\n                if (r.tryLoc === t) {\n                    var n = r.completion;\n                    if (\"throw\" === n.type) {\n                        var o = n.arg;\n                        resetTryEntry(r);\n                    }\n                    return o;\n                }\n            }\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function delegateYield(e, r, n) {\n            return this.delegate = {\n                iterator: values(e),\n                resultName: r,\n                nextLoc: n\n            }, \"next\" === this.method && (this.arg = t), y;\n        }\n    }, e;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction __insertCSS(code) {\n    if (!code || typeof document == \"undefined\") return;\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    var style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    head.appendChild(style);\n    style.styleSheet ? style.styleSheet.cssText = code : style.appendChild(document.createTextNode(code));\n}\n\n\nvar getAsset = function getAsset(type) {\n    switch(type){\n        case \"success\":\n            return SuccessIcon;\n        case \"info\":\n            return InfoIcon;\n        case \"warning\":\n            return WarningIcon;\n        case \"error\":\n            return ErrorIcon;\n        default:\n            return null;\n    }\n};\nvar bars = Array(12).fill(0);\nvar Loader = function Loader(_ref) {\n    var visible = _ref.visible, className = _ref.className;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: [\n            \"sonner-loading-wrapper\",\n            className\n        ].filter(Boolean).join(\" \"),\n        \"data-visible\": visible\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"sonner-spinner\"\n    }, bars.map(function(_, i) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"sonner-loading-bar\",\n            key: \"spinner-bar-\".concat(i)\n        });\n    })));\n};\nvar SuccessIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n    clipRule: \"evenodd\"\n}));\nvar WarningIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\",\n    clipRule: \"evenodd\"\n}));\nvar InfoIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z\",\n    clipRule: \"evenodd\"\n}));\nvar ErrorIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    height: \"20\",\n    width: \"20\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\",\n    clipRule: \"evenodd\"\n}));\nvar CloseIcon = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"12\",\n    height: \"12\",\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"line\", {\n    x1: \"18\",\n    y1: \"6\",\n    x2: \"6\",\n    y2: \"18\"\n}), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"line\", {\n    x1: \"6\",\n    y1: \"6\",\n    x2: \"18\",\n    y2: \"18\"\n}));\nvar useIsDocumentHidden = function useIsDocumentHidden() {\n    var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(document.hidden), _React$useState2 = _slicedToArray(_React$useState, 2), isDocumentHidden = _React$useState2[0], setIsDocumentHidden = _React$useState2[1];\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var callback = function callback() {\n            setIsDocumentHidden(document.hidden);\n        };\n        document.addEventListener(\"visibilitychange\", callback);\n        return function() {\n            return window.removeEventListener(\"visibilitychange\", callback);\n        };\n    }, []);\n    return isDocumentHidden;\n};\nvar toastsCounter = 1;\nvar Observer = /*#__PURE__*/ _createClass(function Observer() {\n    var _this = this;\n    _classCallCheck(this, Observer);\n    // We use arrow functions to maintain the correct `this` reference\n    this.subscribe = function(subscriber) {\n        _this.subscribers.push(subscriber);\n        return function() {\n            var index = _this.subscribers.indexOf(subscriber);\n            _this.subscribers.splice(index, 1);\n        };\n    };\n    this.publish = function(data) {\n        _this.subscribers.forEach(function(subscriber) {\n            return subscriber(data);\n        });\n    };\n    this.addToast = function(data) {\n        _this.publish(data);\n        _this.toasts = [].concat(_toConsumableArray(_this.toasts), [\n            data\n        ]);\n    };\n    this.create = function(data) {\n        var _data_id;\n        var message = data.message, rest = _objectWithoutProperties(data, _excluded);\n        var id = typeof (data == null ? void 0 : data.id) === \"number\" || ((_data_id = data.id) == null ? void 0 : _data_id.length) > 0 ? data.id : toastsCounter++;\n        var alreadyExists = _this.toasts.find(function(toast) {\n            return toast.id === id;\n        });\n        var dismissible = data.dismissible === undefined ? true : data.dismissible;\n        if (_this.dismissedToasts.has(id)) {\n            _this.dismissedToasts[\"delete\"](id);\n        }\n        if (alreadyExists) {\n            _this.toasts = _this.toasts.map(function(toast) {\n                if (toast.id === id) {\n                    _this.publish(_objectSpread(_objectSpread(_objectSpread({}, toast), data), {}, {\n                        id: id,\n                        title: message\n                    }));\n                    return _objectSpread(_objectSpread(_objectSpread({}, toast), data), {}, {\n                        id: id,\n                        dismissible: dismissible,\n                        title: message\n                    });\n                }\n                return toast;\n            });\n        } else {\n            _this.addToast(_objectSpread(_objectSpread({\n                title: message\n            }, rest), {}, {\n                dismissible: dismissible,\n                id: id\n            }));\n        }\n        return id;\n    };\n    this.dismiss = function(id) {\n        if (id) {\n            _this.dismissedToasts.add(id);\n            requestAnimationFrame(function() {\n                return _this.subscribers.forEach(function(subscriber) {\n                    return subscriber({\n                        id: id,\n                        dismiss: true\n                    });\n                });\n            });\n        } else {\n            _this.toasts.forEach(function(toast) {\n                _this.subscribers.forEach(function(subscriber) {\n                    return subscriber({\n                        id: toast.id,\n                        dismiss: true\n                    });\n                });\n            });\n        }\n        return id;\n    };\n    this.message = function(message, data) {\n        return _this.create(_objectSpread(_objectSpread({}, data), {}, {\n            message: message\n        }));\n    };\n    this.error = function(message, data) {\n        return _this.create(_objectSpread(_objectSpread({}, data), {}, {\n            message: message,\n            type: \"error\"\n        }));\n    };\n    this.success = function(message, data) {\n        return _this.create(_objectSpread(_objectSpread({}, data), {}, {\n            type: \"success\",\n            message: message\n        }));\n    };\n    this.info = function(message, data) {\n        return _this.create(_objectSpread(_objectSpread({}, data), {}, {\n            type: \"info\",\n            message: message\n        }));\n    };\n    this.warning = function(message, data) {\n        return _this.create(_objectSpread(_objectSpread({}, data), {}, {\n            type: \"warning\",\n            message: message\n        }));\n    };\n    this.loading = function(message, data) {\n        return _this.create(_objectSpread(_objectSpread({}, data), {}, {\n            type: \"loading\",\n            message: message\n        }));\n    };\n    this.promise = function(promise, data) {\n        if (!data) {\n            // Nothing to show\n            return;\n        }\n        var id = undefined;\n        if (data.loading !== undefined) {\n            id = _this.create(_objectSpread(_objectSpread({}, data), {}, {\n                promise: promise,\n                type: \"loading\",\n                message: data.loading,\n                description: typeof data.description !== \"function\" ? data.description : undefined\n            }));\n        }\n        var p = Promise.resolve(promise instanceof Function ? promise() : promise);\n        var shouldDismiss = id !== undefined;\n        var result;\n        var originalPromise = p.then(/*#__PURE__*/ function() {\n            var _ref2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(response) {\n                var isReactElementResponse, promiseData, description, isExtendedResult, toastSettings, _promiseData, _description, _isExtendedResult, _toastSettings, _promiseData2, _description2, _isExtendedResult2, _toastSettings2, _t, _t2, _t3, _t4, _t5, _t6;\n                return _regeneratorRuntime().wrap(function(_context) {\n                    while(1)switch(_context.prev = _context.next){\n                        case 0:\n                            result = [\n                                \"resolve\",\n                                response\n                            ];\n                            isReactElementResponse = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(response);\n                            if (!isReactElementResponse) {\n                                _context.next = 1;\n                                break;\n                            }\n                            shouldDismiss = false;\n                            _this.create({\n                                id: id,\n                                type: \"default\",\n                                message: response\n                            });\n                            _context.next = 22;\n                            break;\n                        case 1:\n                            if (!(isHttpResponse(response) && !response.ok)) {\n                                _context.next = 8;\n                                break;\n                            }\n                            shouldDismiss = false;\n                            if (!(typeof data.error === \"function\")) {\n                                _context.next = 3;\n                                break;\n                            }\n                            _context.next = 2;\n                            return data.error(\"HTTP error! status: \".concat(response.status));\n                        case 2:\n                            _t = _context.sent;\n                            _context.next = 4;\n                            break;\n                        case 3:\n                            _t = data.error;\n                        case 4:\n                            promiseData = _t;\n                            if (!(typeof data.description === \"function\")) {\n                                _context.next = 6;\n                                break;\n                            }\n                            _context.next = 5;\n                            return data.description(\"HTTP error! status: \".concat(response.status));\n                        case 5:\n                            _t2 = _context.sent;\n                            _context.next = 7;\n                            break;\n                        case 6:\n                            _t2 = data.description;\n                        case 7:\n                            description = _t2;\n                            isExtendedResult = _typeof(promiseData) === \"object\" && !/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(promiseData);\n                            toastSettings = isExtendedResult ? promiseData : {\n                                message: promiseData\n                            };\n                            _this.create(_objectSpread({\n                                id: id,\n                                type: \"error\",\n                                description: description\n                            }, toastSettings));\n                            _context.next = 22;\n                            break;\n                        case 8:\n                            if (!(response instanceof Error)) {\n                                _context.next = 15;\n                                break;\n                            }\n                            shouldDismiss = false;\n                            if (!(typeof data.error === \"function\")) {\n                                _context.next = 10;\n                                break;\n                            }\n                            _context.next = 9;\n                            return data.error(response);\n                        case 9:\n                            _t3 = _context.sent;\n                            _context.next = 11;\n                            break;\n                        case 10:\n                            _t3 = data.error;\n                        case 11:\n                            _promiseData = _t3;\n                            if (!(typeof data.description === \"function\")) {\n                                _context.next = 13;\n                                break;\n                            }\n                            _context.next = 12;\n                            return data.description(response);\n                        case 12:\n                            _t4 = _context.sent;\n                            _context.next = 14;\n                            break;\n                        case 13:\n                            _t4 = data.description;\n                        case 14:\n                            _description = _t4;\n                            _isExtendedResult = _typeof(_promiseData) === \"object\" && !/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(_promiseData);\n                            _toastSettings = _isExtendedResult ? _promiseData : {\n                                message: _promiseData\n                            };\n                            _this.create(_objectSpread({\n                                id: id,\n                                type: \"error\",\n                                description: _description\n                            }, _toastSettings));\n                            _context.next = 22;\n                            break;\n                        case 15:\n                            if (!(data.success !== undefined)) {\n                                _context.next = 22;\n                                break;\n                            }\n                            shouldDismiss = false;\n                            if (!(typeof data.success === \"function\")) {\n                                _context.next = 17;\n                                break;\n                            }\n                            _context.next = 16;\n                            return data.success(response);\n                        case 16:\n                            _t5 = _context.sent;\n                            _context.next = 18;\n                            break;\n                        case 17:\n                            _t5 = data.success;\n                        case 18:\n                            _promiseData2 = _t5;\n                            if (!(typeof data.description === \"function\")) {\n                                _context.next = 20;\n                                break;\n                            }\n                            _context.next = 19;\n                            return data.description(response);\n                        case 19:\n                            _t6 = _context.sent;\n                            _context.next = 21;\n                            break;\n                        case 20:\n                            _t6 = data.description;\n                        case 21:\n                            _description2 = _t6;\n                            _isExtendedResult2 = _typeof(_promiseData2) === \"object\" && !/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(_promiseData2);\n                            _toastSettings2 = _isExtendedResult2 ? _promiseData2 : {\n                                message: _promiseData2\n                            };\n                            _this.create(_objectSpread({\n                                id: id,\n                                type: \"success\",\n                                description: _description2\n                            }, _toastSettings2));\n                        case 22:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }, _callee);\n            }));\n            return function(_x) {\n                return _ref2.apply(this, arguments);\n            };\n        }())[\"catch\"](/*#__PURE__*/ function() {\n            var _ref3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(error) {\n                var promiseData, description, isExtendedResult, toastSettings, _t7, _t8;\n                return _regeneratorRuntime().wrap(function(_context2) {\n                    while(1)switch(_context2.prev = _context2.next){\n                        case 0:\n                            result = [\n                                \"reject\",\n                                error\n                            ];\n                            if (!(data.error !== undefined)) {\n                                _context2.next = 7;\n                                break;\n                            }\n                            shouldDismiss = false;\n                            if (!(typeof data.error === \"function\")) {\n                                _context2.next = 2;\n                                break;\n                            }\n                            _context2.next = 1;\n                            return data.error(error);\n                        case 1:\n                            _t7 = _context2.sent;\n                            _context2.next = 3;\n                            break;\n                        case 2:\n                            _t7 = data.error;\n                        case 3:\n                            promiseData = _t7;\n                            if (!(typeof data.description === \"function\")) {\n                                _context2.next = 5;\n                                break;\n                            }\n                            _context2.next = 4;\n                            return data.description(error);\n                        case 4:\n                            _t8 = _context2.sent;\n                            _context2.next = 6;\n                            break;\n                        case 5:\n                            _t8 = data.description;\n                        case 6:\n                            description = _t8;\n                            isExtendedResult = _typeof(promiseData) === \"object\" && !/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(promiseData);\n                            toastSettings = isExtendedResult ? promiseData : {\n                                message: promiseData\n                            };\n                            _this.create(_objectSpread({\n                                id: id,\n                                type: \"error\",\n                                description: description\n                            }, toastSettings));\n                        case 7:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }, _callee2);\n            }));\n            return function(_x2) {\n                return _ref3.apply(this, arguments);\n            };\n        }())[\"finally\"](function() {\n            if (shouldDismiss) {\n                // Toast is still in load state (and will be indefinitely — dismiss it)\n                _this.dismiss(id);\n                id = undefined;\n            }\n            data[\"finally\"] == null ? void 0 : data[\"finally\"].call(data);\n        });\n        var unwrap = function unwrap() {\n            return new Promise(function(resolve, reject) {\n                return originalPromise.then(function() {\n                    return result[0] === \"reject\" ? reject(result[1]) : resolve(result[1]);\n                })[\"catch\"](reject);\n            });\n        };\n        if (typeof id !== \"string\" && typeof id !== \"number\") {\n            // cannot Object.assign on undefined\n            return {\n                unwrap: unwrap\n            };\n        } else {\n            return Object.assign(id, {\n                unwrap: unwrap\n            });\n        }\n    };\n    this.custom = function(jsx, data) {\n        var id = (data == null ? void 0 : data.id) || toastsCounter++;\n        _this.create(_objectSpread({\n            jsx: jsx(id),\n            id: id\n        }, data));\n        return id;\n    };\n    this.getActiveToasts = function() {\n        return _this.toasts.filter(function(toast) {\n            return !_this.dismissedToasts.has(toast.id);\n        });\n    };\n    this.subscribers = [];\n    this.toasts = [];\n    this.dismissedToasts = new Set();\n});\nvar ToastState = new Observer();\n// bind this to the toast function\nvar toastFunction = function toastFunction(message, data) {\n    var id = (data == null ? void 0 : data.id) || toastsCounter++;\n    ToastState.addToast(_objectSpread(_objectSpread({\n        title: message\n    }, data), {}, {\n        id: id\n    }));\n    return id;\n};\nvar isHttpResponse = function isHttpResponse(data) {\n    return data && _typeof(data) === \"object\" && \"ok\" in data && typeof data.ok === \"boolean\" && \"status\" in data && typeof data.status === \"number\";\n};\nvar basicToast = toastFunction;\nvar getHistory = function getHistory() {\n    return ToastState.toasts;\n};\nvar getToasts = function getToasts() {\n    return ToastState.getActiveToasts();\n};\n// We use `Object.assign` to maintain the correct types as we would lose them otherwise\nvar toast = Object.assign(basicToast, {\n    success: ToastState.success,\n    info: ToastState.info,\n    warning: ToastState.warning,\n    error: ToastState.error,\n    custom: ToastState.custom,\n    message: ToastState.message,\n    promise: ToastState.promise,\n    dismiss: ToastState.dismiss,\n    loading: ToastState.loading\n}, {\n    getHistory: getHistory,\n    getToasts: getToasts\n});\n__insertCSS(\"[data-sonner-toaster][dir=ltr],html[dir=ltr]{--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}[data-sonner-toaster][dir=rtl],html[dir=rtl]{--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:0;z-index:999999999;transition:transform .4s ease}@media (hover:none) and (pointer:coarse){[data-sonner-toaster][data-lifted=true]{transform:none}}[data-sonner-toaster][data-x-position=right]{right:var(--offset-right)}[data-sonner-toaster][data-x-position=left]{left:var(--offset-left)}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position=top]{top:var(--offset-top)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--offset-bottom)}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:0;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px rgba(0,0,0,.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-y-position=top]{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast][data-styled=true] [data-description]{font-weight:400;line-height:1.4;color:#3f3f3f}[data-rich-colors=true][data-sonner-toast][data-styled=true] [data-description]{color:inherit}[data-sonner-toaster][data-sonner-theme=dark] [data-description]{color:#e8e8e8}[data-sonner-toast][data-styled=true] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast][data-styled=true] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast][data-styled=true] [data-icon]>*{flex-shrink:0}[data-sonner-toast][data-styled=true] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast][data-styled=true] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;font-weight:500;cursor:pointer;outline:0;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast][data-styled=true] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0,0,0,.4)}[data-sonner-toast][data-styled=true] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast][data-styled=true] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-styled=true] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast][data-styled=true] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);background:var(--normal-bg);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast][data-styled=true] [data-close-button]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-styled=true] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast][data-styled=true]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]::before{content:'';position:absolute;left:-100%;right:-100%;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]::before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]::before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]::before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast][data-expanded=true]::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-x-position=right]{right:0}[data-sonner-toast][data-x-position=left]{left:0}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y:translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount-y,0)) translateX(var(--swipe-amount-x,0));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:forwards}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=left]{animation-name:swipe-out-left}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=right]{animation-name:swipe-out-right}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=up]{animation-name:swipe-out-up}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=down]{animation-name:swipe-out-down}@keyframes swipe-out-left{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) - 100%));opacity:0}}@keyframes swipe-out-right{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) + 100%));opacity:0}}@keyframes swipe-out-up{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) - 100%));opacity:0}}@keyframes swipe-out-down{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) + 100%));opacity:0}}@media (max-width:600px){[data-sonner-toaster]{position:fixed;right:var(--mobile-offset-right);left:var(--mobile-offset-left);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset-left) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset-left) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset-left)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--mobile-offset-bottom)}[data-sonner-toaster][data-y-position=top]{top:var(--mobile-offset-top)}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset-left);right:var(--mobile-offset-right);transform:none}}[data-sonner-toaster][data-sonner-theme=light]{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 87%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 93%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 84%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-sonner-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-sonner-theme=dark]{--normal-bg:#000;--normal-bg-hover:hsl(0, 0%, 12%);--normal-border:hsl(0, 0%, 20%);--normal-border-hover:hsl(0, 0%, 25%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 43%, 17%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 9%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]:hover{background:var(--normal-bg-hover);border-color:var(--normal-border-hover)}[data-rich-colors=true][data-sonner-toast][data-type=success]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:first-child{animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:.15}}@media (prefers-reduced-motion){.sonner-loading-bar,[data-sonner-toast],[data-sonner-toast]>*{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}\");\nfunction isAction(action) {\n    return action.label !== undefined;\n}\n// Visible toasts amount\nvar VISIBLE_TOASTS_AMOUNT = 3;\n// Viewport padding\nvar VIEWPORT_OFFSET = \"24px\";\n// Mobile viewport padding\nvar MOBILE_VIEWPORT_OFFSET = \"16px\";\n// Default lifetime of a toasts (in ms)\nvar TOAST_LIFETIME = 4000;\n// Default toast width\nvar TOAST_WIDTH = 356;\n// Default gap between toasts\nvar GAP = 14;\n// Threshold to dismiss a toast\nvar SWIPE_THRESHOLD = 45;\n// Equal to exit animation duration\nvar TIME_BEFORE_UNMOUNT = 200;\nfunction cn() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.filter(Boolean).join(\" \");\n}\nfunction getDefaultSwipeDirections(position) {\n    var _position$split = position.split(\"-\"), _position$split2 = _slicedToArray(_position$split, 2), y = _position$split2[0], x = _position$split2[1];\n    var directions = [];\n    if (y) {\n        directions.push(y);\n    }\n    if (x) {\n        directions.push(x);\n    }\n    return directions;\n}\nvar Toast = function Toast(props) {\n    var _toast_classNames, _toast_classNames1, _toast_classNames2, _toast_classNames3, _toast_classNames4, _toast_classNames5, _toast_classNames6, _toast_classNames7, _toast_classNames8;\n    var ToasterInvert = props.invert, toast = props.toast, unstyled = props.unstyled, interacting = props.interacting, setHeights = props.setHeights, visibleToasts = props.visibleToasts, heights = props.heights, index = props.index, toasts = props.toasts, expanded = props.expanded, removeToast = props.removeToast, defaultRichColors = props.defaultRichColors, closeButtonFromToaster = props.closeButton, style = props.style, cancelButtonStyle = props.cancelButtonStyle, actionButtonStyle = props.actionButtonStyle, _props$className = props.className, className = _props$className === void 0 ? \"\" : _props$className, _props$descriptionCla = props.descriptionClassName, descriptionClassName = _props$descriptionCla === void 0 ? \"\" : _props$descriptionCla, durationFromToaster = props.duration, position = props.position, gap = props.gap, expandByDefault = props.expandByDefault, classNames = props.classNames, icons = props.icons, _props$closeButtonAri = props.closeButtonAriaLabel, closeButtonAriaLabel = _props$closeButtonAri === void 0 ? \"Close toast\" : _props$closeButtonAri;\n    var _React$useState3 = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), swipeDirection = _React$useState4[0], setSwipeDirection = _React$useState4[1];\n    var _React$useState5 = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), swipeOutDirection = _React$useState6[0], setSwipeOutDirection = _React$useState6[1];\n    var _React$useState7 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), mounted = _React$useState8[0], setMounted = _React$useState8[1];\n    var _React$useState9 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState10 = _slicedToArray(_React$useState9, 2), removed = _React$useState10[0], setRemoved = _React$useState10[1];\n    var _React$useState11 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState12 = _slicedToArray(_React$useState11, 2), swiping = _React$useState12[0], setSwiping = _React$useState12[1];\n    var _React$useState13 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState14 = _slicedToArray(_React$useState13, 2), swipeOut = _React$useState14[0], setSwipeOut = _React$useState14[1];\n    var _React$useState15 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState16 = _slicedToArray(_React$useState15, 2), isSwiped = _React$useState16[0], setIsSwiped = _React$useState16[1];\n    var _React$useState17 = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), _React$useState18 = _slicedToArray(_React$useState17, 2), offsetBeforeRemove = _React$useState18[0], setOffsetBeforeRemove = _React$useState18[1];\n    var _React$useState19 = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), _React$useState20 = _slicedToArray(_React$useState19, 2), initialHeight = _React$useState20[0], setInitialHeight = _React$useState20[1];\n    var remainingTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(toast.duration || durationFromToaster || TOAST_LIFETIME);\n    var dragStartTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    var toastRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    var isFront = index === 0;\n    var isVisible = index + 1 <= visibleToasts;\n    var toastType = toast.type;\n    var dismissible = toast.dismissible !== false;\n    var toastClassname = toast.className || \"\";\n    var toastDescriptionClassname = toast.descriptionClassName || \"\";\n    // Height index is used to calculate the offset as it gets updated before the toast array, which means we can calculate the new layout faster.\n    var heightIndex = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return heights.findIndex(function(height) {\n            return height.toastId === toast.id;\n        }) || 0;\n    }, [\n        heights,\n        toast.id\n    ]);\n    var closeButton = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        var _toast_closeButton;\n        return (_toast_closeButton = toast.closeButton) != null ? _toast_closeButton : closeButtonFromToaster;\n    }, [\n        toast.closeButton,\n        closeButtonFromToaster\n    ]);\n    var duration = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return toast.duration || durationFromToaster || TOAST_LIFETIME;\n    }, [\n        toast.duration,\n        durationFromToaster\n    ]);\n    var closeTimerStartTimeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    var offset = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    var lastCloseTimerStartTimeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    var pointerStartRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    var _position$split3 = position.split(\"-\"), _position$split4 = _slicedToArray(_position$split3, 2), y = _position$split4[0], x = _position$split4[1];\n    var toastsHeightBefore = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return heights.reduce(function(prev, curr, reducerIndex) {\n            // Calculate offset up until current toast\n            if (reducerIndex >= heightIndex) {\n                return prev;\n            }\n            return prev + curr.height;\n        }, 0);\n    }, [\n        heights,\n        heightIndex\n    ]);\n    var isDocumentHidden = useIsDocumentHidden();\n    var invert = toast.invert || ToasterInvert;\n    var disabled = toastType === \"loading\";\n    offset.current = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return heightIndex * gap + toastsHeightBefore;\n    }, [\n        heightIndex,\n        toastsHeightBefore\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        remainingTime.current = duration;\n    }, [\n        duration\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        // Trigger enter animation without using CSS animation\n        setMounted(true);\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var toastNode = toastRef.current;\n        if (toastNode) {\n            var height = toastNode.getBoundingClientRect().height;\n            // Add toast height to heights array after the toast is mounted\n            setInitialHeight(height);\n            setHeights(function(h) {\n                return [\n                    {\n                        toastId: toast.id,\n                        height: height,\n                        position: toast.position\n                    }\n                ].concat(_toConsumableArray(h));\n            });\n            return function() {\n                return setHeights(function(h) {\n                    return h.filter(function(height) {\n                        return height.toastId !== toast.id;\n                    });\n                });\n            };\n        }\n    }, [\n        setHeights,\n        toast.id\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(function() {\n        // Keep height up to date with the content in case it updates\n        if (!mounted) return;\n        var toastNode = toastRef.current;\n        var originalHeight = toastNode.style.height;\n        toastNode.style.height = \"auto\";\n        var newHeight = toastNode.getBoundingClientRect().height;\n        toastNode.style.height = originalHeight;\n        setInitialHeight(newHeight);\n        setHeights(function(heights) {\n            var alreadyExists = heights.find(function(height) {\n                return height.toastId === toast.id;\n            });\n            if (!alreadyExists) {\n                return [\n                    {\n                        toastId: toast.id,\n                        height: newHeight,\n                        position: toast.position\n                    }\n                ].concat(_toConsumableArray(heights));\n            } else {\n                return heights.map(function(height) {\n                    return height.toastId === toast.id ? _objectSpread(_objectSpread({}, height), {}, {\n                        height: newHeight\n                    }) : height;\n                });\n            }\n        });\n    }, [\n        mounted,\n        toast.title,\n        toast.description,\n        setHeights,\n        toast.id,\n        toast.jsx,\n        toast.action,\n        toast.cancel\n    ]);\n    var deleteToast = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function() {\n        // Save the offset for the exit swipe animation\n        setRemoved(true);\n        setOffsetBeforeRemove(offset.current);\n        setHeights(function(h) {\n            return h.filter(function(height) {\n                return height.toastId !== toast.id;\n            });\n        });\n        setTimeout(function() {\n            removeToast(toast);\n        }, TIME_BEFORE_UNMOUNT);\n    }, [\n        toast,\n        removeToast,\n        setHeights,\n        offset\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        if (toast.promise && toastType === \"loading\" || toast.duration === Infinity || toast.type === \"loading\") return;\n        var timeoutId;\n        // Pause the timer on each hover\n        var pauseTimer = function pauseTimer() {\n            if (lastCloseTimerStartTimeRef.current < closeTimerStartTimeRef.current) {\n                // Get the elapsed time since the timer started\n                var elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;\n                remainingTime.current = remainingTime.current - elapsedTime;\n            }\n            lastCloseTimerStartTimeRef.current = new Date().getTime();\n        };\n        var startTimer = function startTimer() {\n            // setTimeout(, Infinity) behaves as if the delay is 0.\n            // As a result, the toast would be closed immediately, giving the appearance that it was never rendered.\n            // See: https://github.com/denysdovhan/wtfjs?tab=readme-ov-file#an-infinite-timeout\n            if (remainingTime.current === Infinity) return;\n            closeTimerStartTimeRef.current = new Date().getTime();\n            // Let the toast know it has started\n            timeoutId = setTimeout(function() {\n                toast.onAutoClose == null ? void 0 : toast.onAutoClose.call(toast, toast);\n                deleteToast();\n            }, remainingTime.current);\n        };\n        if (expanded || interacting || isDocumentHidden) {\n            pauseTimer();\n        } else {\n            startTimer();\n        }\n        return function() {\n            return clearTimeout(timeoutId);\n        };\n    }, [\n        expanded,\n        interacting,\n        toast,\n        toastType,\n        isDocumentHidden,\n        deleteToast\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        if (toast[\"delete\"]) {\n            deleteToast();\n            toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);\n        }\n    }, [\n        deleteToast,\n        toast[\"delete\"]\n    ]);\n    function getLoadingIcon() {\n        var _toast_classNames;\n        if (icons == null ? void 0 : icons.loading) {\n            var _toast_classNames1;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                className: cn(classNames == null ? void 0 : classNames.loader, toast == null ? void 0 : (_toast_classNames1 = toast.classNames) == null ? void 0 : _toast_classNames1.loader, \"sonner-loader\"),\n                \"data-visible\": toastType === \"loading\"\n            }, icons.loading);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Loader, {\n            className: cn(classNames == null ? void 0 : classNames.loader, toast == null ? void 0 : (_toast_classNames = toast.classNames) == null ? void 0 : _toast_classNames.loader),\n            visible: toastType === \"loading\"\n        });\n    }\n    var icon = toast.icon || (icons == null ? void 0 : icons[toastType]) || getAsset(toastType);\n    var _toast_richColors, _icons_close;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n        tabIndex: 0,\n        ref: toastRef,\n        className: cn(className, toastClassname, classNames == null ? void 0 : classNames.toast, toast == null ? void 0 : (_toast_classNames = toast.classNames) == null ? void 0 : _toast_classNames.toast, classNames == null ? void 0 : classNames[\"default\"], classNames == null ? void 0 : classNames[toastType], toast == null ? void 0 : (_toast_classNames1 = toast.classNames) == null ? void 0 : _toast_classNames1[toastType]),\n        \"data-sonner-toast\": \"\",\n        \"data-rich-colors\": (_toast_richColors = toast.richColors) != null ? _toast_richColors : defaultRichColors,\n        \"data-styled\": !Boolean(toast.jsx || toast.unstyled || unstyled),\n        \"data-mounted\": mounted,\n        \"data-promise\": Boolean(toast.promise),\n        \"data-swiped\": isSwiped,\n        \"data-removed\": removed,\n        \"data-visible\": isVisible,\n        \"data-y-position\": y,\n        \"data-x-position\": x,\n        \"data-index\": index,\n        \"data-front\": isFront,\n        \"data-swiping\": swiping,\n        \"data-dismissible\": dismissible,\n        \"data-type\": toastType,\n        \"data-invert\": invert,\n        \"data-swipe-out\": swipeOut,\n        \"data-swipe-direction\": swipeOutDirection,\n        \"data-expanded\": Boolean(expanded || expandByDefault && mounted),\n        style: _objectSpread(_objectSpread({\n            \"--index\": index,\n            \"--toasts-before\": index,\n            \"--z-index\": toasts.length - index,\n            \"--offset\": \"\".concat(removed ? offsetBeforeRemove : offset.current, \"px\"),\n            \"--initial-height\": expandByDefault ? \"auto\" : \"\".concat(initialHeight, \"px\")\n        }, style), toast.style),\n        onDragEnd: function onDragEnd() {\n            setSwiping(false);\n            setSwipeDirection(null);\n            pointerStartRef.current = null;\n        },\n        onPointerDown: function onPointerDown(event) {\n            if (disabled || !dismissible) return;\n            dragStartTime.current = new Date();\n            setOffsetBeforeRemove(offset.current);\n            // Ensure we maintain correct pointer capture even when going outside of the toast (e.g. when swiping)\n            event.target.setPointerCapture(event.pointerId);\n            if (event.target.tagName === \"BUTTON\") return;\n            setSwiping(true);\n            pointerStartRef.current = {\n                x: event.clientX,\n                y: event.clientY\n            };\n        },\n        onPointerUp: function onPointerUp() {\n            var _toastRef_current, _toastRef_current1, _dragStartTime_current;\n            if (swipeOut || !dismissible) return;\n            pointerStartRef.current = null;\n            var swipeAmountX = Number(((_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.getPropertyValue(\"--swipe-amount-x\").replace(\"px\", \"\")) || 0);\n            var swipeAmountY = Number(((_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.getPropertyValue(\"--swipe-amount-y\").replace(\"px\", \"\")) || 0);\n            var timeTaken = new Date().getTime() - ((_dragStartTime_current = dragStartTime.current) == null ? void 0 : _dragStartTime_current.getTime());\n            var swipeAmount = swipeDirection === \"x\" ? swipeAmountX : swipeAmountY;\n            var velocity = Math.abs(swipeAmount) / timeTaken;\n            if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD || velocity > 0.11) {\n                setOffsetBeforeRemove(offset.current);\n                toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);\n                if (swipeDirection === \"x\") {\n                    setSwipeOutDirection(swipeAmountX > 0 ? \"right\" : \"left\");\n                } else {\n                    setSwipeOutDirection(swipeAmountY > 0 ? \"down\" : \"up\");\n                }\n                deleteToast();\n                setSwipeOut(true);\n                return;\n            } else {\n                var _toastRef_current2, _toastRef_current3;\n                (_toastRef_current2 = toastRef.current) == null ? void 0 : _toastRef_current2.style.setProperty(\"--swipe-amount-x\", \"0px\");\n                (_toastRef_current3 = toastRef.current) == null ? void 0 : _toastRef_current3.style.setProperty(\"--swipe-amount-y\", \"0px\");\n            }\n            setIsSwiped(false);\n            setSwiping(false);\n            setSwipeDirection(null);\n        },\n        onPointerMove: function onPointerMove(event) {\n            var _window_getSelection, // Apply transform using both x and y values\n            _toastRef_current, _toastRef_current1;\n            if (!pointerStartRef.current || !dismissible) return;\n            var isHighlighted = ((_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString().length) > 0;\n            if (isHighlighted) return;\n            var yDelta = event.clientY - pointerStartRef.current.y;\n            var xDelta = event.clientX - pointerStartRef.current.x;\n            var _props_swipeDirections;\n            var swipeDirections = (_props_swipeDirections = props.swipeDirections) != null ? _props_swipeDirections : getDefaultSwipeDirections(position);\n            // Determine swipe direction if not already locked\n            if (!swipeDirection && (Math.abs(xDelta) > 1 || Math.abs(yDelta) > 1)) {\n                setSwipeDirection(Math.abs(xDelta) > Math.abs(yDelta) ? \"x\" : \"y\");\n            }\n            var swipeAmount = {\n                x: 0,\n                y: 0\n            };\n            var getDampening = function getDampening(delta) {\n                var factor = Math.abs(delta) / 20;\n                return 1 / (1.5 + factor);\n            };\n            // Only apply swipe in the locked direction\n            if (swipeDirection === \"y\") {\n                // Handle vertical swipes\n                if (swipeDirections.includes(\"top\") || swipeDirections.includes(\"bottom\")) {\n                    if (swipeDirections.includes(\"top\") && yDelta < 0 || swipeDirections.includes(\"bottom\") && yDelta > 0) {\n                        swipeAmount.y = yDelta;\n                    } else {\n                        // Smoothly transition to dampened movement\n                        var dampenedDelta = yDelta * getDampening(yDelta);\n                        // Ensure we don't jump when transitioning to dampened movement\n                        swipeAmount.y = Math.abs(dampenedDelta) < Math.abs(yDelta) ? dampenedDelta : yDelta;\n                    }\n                }\n            } else if (swipeDirection === \"x\") {\n                // Handle horizontal swipes\n                if (swipeDirections.includes(\"left\") || swipeDirections.includes(\"right\")) {\n                    if (swipeDirections.includes(\"left\") && xDelta < 0 || swipeDirections.includes(\"right\") && xDelta > 0) {\n                        swipeAmount.x = xDelta;\n                    } else {\n                        // Smoothly transition to dampened movement\n                        var _dampenedDelta = xDelta * getDampening(xDelta);\n                        // Ensure we don't jump when transitioning to dampened movement\n                        swipeAmount.x = Math.abs(_dampenedDelta) < Math.abs(xDelta) ? _dampenedDelta : xDelta;\n                    }\n                }\n            }\n            if (Math.abs(swipeAmount.x) > 0 || Math.abs(swipeAmount.y) > 0) {\n                setIsSwiped(true);\n            }\n            (_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.setProperty(\"--swipe-amount-x\", \"\".concat(swipeAmount.x, \"px\"));\n            (_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.setProperty(\"--swipe-amount-y\", \"\".concat(swipeAmount.y, \"px\"));\n        }\n    }, closeButton && !toast.jsx && toastType !== \"loading\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        \"aria-label\": closeButtonAriaLabel,\n        \"data-disabled\": disabled,\n        \"data-close-button\": true,\n        onClick: disabled || !dismissible ? function() {} : function() {\n            deleteToast();\n            toast.onDismiss == null ? void 0 : toast.onDismiss.call(toast, toast);\n        },\n        className: cn(classNames == null ? void 0 : classNames.closeButton, toast == null ? void 0 : (_toast_classNames2 = toast.classNames) == null ? void 0 : _toast_classNames2.closeButton)\n    }, (_icons_close = icons == null ? void 0 : icons.close) != null ? _icons_close : CloseIcon) : null, (toastType || toast.icon || toast.promise) && toast.icon !== null && ((icons == null ? void 0 : icons[toastType]) !== null || toast.icon) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-icon\": \"\",\n        className: cn(classNames == null ? void 0 : classNames.icon, toast == null ? void 0 : (_toast_classNames3 = toast.classNames) == null ? void 0 : _toast_classNames3.icon)\n    }, toast.promise || toast.type === \"loading\" && !toast.icon ? toast.icon || getLoadingIcon() : null, toast.type !== \"loading\" ? icon : null) : null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-content\": \"\",\n        className: cn(classNames == null ? void 0 : classNames.content, toast == null ? void 0 : (_toast_classNames4 = toast.classNames) == null ? void 0 : _toast_classNames4.content)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-title\": \"\",\n        className: cn(classNames == null ? void 0 : classNames.title, toast == null ? void 0 : (_toast_classNames5 = toast.classNames) == null ? void 0 : _toast_classNames5.title)\n    }, toast.jsx ? toast.jsx : typeof toast.title === \"function\" ? toast.title() : toast.title), toast.description ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"data-description\": \"\",\n        className: cn(descriptionClassName, toastDescriptionClassname, classNames == null ? void 0 : classNames.description, toast == null ? void 0 : (_toast_classNames6 = toast.classNames) == null ? void 0 : _toast_classNames6.description)\n    }, typeof toast.description === \"function\" ? toast.description() : toast.description) : null), /*#__PURE__*/ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(toast.cancel) ? toast.cancel : toast.cancel && isAction(toast.cancel) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        \"data-button\": true,\n        \"data-cancel\": true,\n        style: toast.cancelButtonStyle || cancelButtonStyle,\n        onClick: function onClick(event) {\n            // We need to check twice because typescript\n            if (!isAction(toast.cancel)) return;\n            if (!dismissible) return;\n            toast.cancel.onClick == null ? void 0 : toast.cancel.onClick.call(toast.cancel, event);\n            deleteToast();\n        },\n        className: cn(classNames == null ? void 0 : classNames.cancelButton, toast == null ? void 0 : (_toast_classNames7 = toast.classNames) == null ? void 0 : _toast_classNames7.cancelButton)\n    }, toast.cancel.label) : null, /*#__PURE__*/ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(toast.action) ? toast.action : toast.action && isAction(toast.action) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        \"data-button\": true,\n        \"data-action\": true,\n        style: toast.actionButtonStyle || actionButtonStyle,\n        onClick: function onClick(event) {\n            // We need to check twice because typescript\n            if (!isAction(toast.action)) return;\n            toast.action.onClick == null ? void 0 : toast.action.onClick.call(toast.action, event);\n            if (event.defaultPrevented) return;\n            deleteToast();\n        },\n        className: cn(classNames == null ? void 0 : classNames.actionButton, toast == null ? void 0 : (_toast_classNames8 = toast.classNames) == null ? void 0 : _toast_classNames8.actionButton)\n    }, toast.action.label) : null);\n};\nfunction getDocumentDirection() {\n    if (true) return \"ltr\";\n    if (typeof document === \"undefined\") return \"ltr\"; // For Fresh purpose\n    var dirAttribute = document.documentElement.getAttribute(\"dir\");\n    if (dirAttribute === \"auto\" || !dirAttribute) {\n        return window.getComputedStyle(document.documentElement).direction;\n    }\n    return dirAttribute;\n}\nfunction assignOffset(defaultOffset, mobileOffset) {\n    var styles = {};\n    [\n        defaultOffset,\n        mobileOffset\n    ].forEach(function(offset, index) {\n        var isMobile = index === 1;\n        var prefix = isMobile ? \"--mobile-offset\" : \"--offset\";\n        var defaultValue = isMobile ? MOBILE_VIEWPORT_OFFSET : VIEWPORT_OFFSET;\n        function assignAll(offset) {\n            [\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ].forEach(function(key) {\n                styles[\"\".concat(prefix, \"-\").concat(key)] = typeof offset === \"number\" ? \"\".concat(offset, \"px\") : offset;\n            });\n        }\n        if (typeof offset === \"number\" || typeof offset === \"string\") {\n            assignAll(offset);\n        } else if (_typeof(offset) === \"object\") {\n            [\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ].forEach(function(key) {\n                if (offset[key] === undefined) {\n                    styles[\"\".concat(prefix, \"-\").concat(key)] = defaultValue;\n                } else {\n                    styles[\"\".concat(prefix, \"-\").concat(key)] = typeof offset[key] === \"number\" ? \"\".concat(offset[key], \"px\") : offset[key];\n                }\n            });\n        } else {\n            assignAll(defaultValue);\n        }\n    });\n    return styles;\n}\nfunction useSonner() {\n    var _React$useState21 = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), _React$useState22 = _slicedToArray(_React$useState21, 2), activeToasts = _React$useState22[0], setActiveToasts = _React$useState22[1];\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        return ToastState.subscribe(function(toast) {\n            if (toast.dismiss) {\n                setTimeout(function() {\n                    react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(function() {\n                        setActiveToasts(function(toasts) {\n                            return toasts.filter(function(t) {\n                                return t.id !== toast.id;\n                            });\n                        });\n                    });\n                });\n                return;\n            }\n            // Prevent batching, temp solution.\n            setTimeout(function() {\n                react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(function() {\n                    setActiveToasts(function(toasts) {\n                        var indexOfExistingToast = toasts.findIndex(function(t) {\n                            return t.id === toast.id;\n                        });\n                        // Update the toast if it already exists\n                        if (indexOfExistingToast !== -1) {\n                            return [].concat(_toConsumableArray(toasts.slice(0, indexOfExistingToast)), [\n                                _objectSpread(_objectSpread({}, toasts[indexOfExistingToast]), toast)\n                            ], _toConsumableArray(toasts.slice(indexOfExistingToast + 1)));\n                        }\n                        return [\n                            toast\n                        ].concat(_toConsumableArray(toasts));\n                    });\n                });\n            });\n        });\n    }, []);\n    return {\n        toasts: activeToasts\n    };\n}\nvar Toaster = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function Toaster(props, ref) {\n    var invert = props.invert, _props$position = props.position, position = _props$position === void 0 ? \"bottom-right\" : _props$position, _props$hotkey = props.hotkey, hotkey = _props$hotkey === void 0 ? [\n        \"altKey\",\n        \"KeyT\"\n    ] : _props$hotkey, expand = props.expand, closeButton = props.closeButton, className = props.className, offset = props.offset, mobileOffset = props.mobileOffset, _props$theme = props.theme, theme = _props$theme === void 0 ? \"light\" : _props$theme, richColors = props.richColors, duration = props.duration, style = props.style, _props$visibleToasts = props.visibleToasts, visibleToasts = _props$visibleToasts === void 0 ? VISIBLE_TOASTS_AMOUNT : _props$visibleToasts, toastOptions = props.toastOptions, _props$dir = props.dir, dir = _props$dir === void 0 ? getDocumentDirection() : _props$dir, _props$gap = props.gap, gap = _props$gap === void 0 ? GAP : _props$gap, icons = props.icons, _props$containerAriaL = props.containerAriaLabel, containerAriaLabel = _props$containerAriaL === void 0 ? \"Notifications\" : _props$containerAriaL;\n    var _React$useState23 = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), _React$useState24 = _slicedToArray(_React$useState23, 2), toasts = _React$useState24[0], setToasts = _React$useState24[1];\n    var possiblePositions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        return Array.from(new Set([\n            position\n        ].concat(toasts.filter(function(toast) {\n            return toast.position;\n        }).map(function(toast) {\n            return toast.position;\n        }))));\n    }, [\n        toasts,\n        position\n    ]);\n    var _React$useState25 = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), _React$useState26 = _slicedToArray(_React$useState25, 2), heights = _React$useState26[0], setHeights = _React$useState26[1];\n    var _React$useState27 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState28 = _slicedToArray(_React$useState27, 2), expanded = _React$useState28[0], setExpanded = _React$useState28[1];\n    var _React$useState29 = react__WEBPACK_IMPORTED_MODULE_0__.useState(false), _React$useState30 = _slicedToArray(_React$useState29, 2), interacting = _React$useState30[0], setInteracting = _React$useState30[1];\n    var _React$useState31 = react__WEBPACK_IMPORTED_MODULE_0__.useState(theme !== \"system\" ? theme :  false ? 0 : \"light\"), _React$useState32 = _slicedToArray(_React$useState31, 2), actualTheme = _React$useState32[0], setActualTheme = _React$useState32[1];\n    var listRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    var hotkeyLabel = hotkey.join(\"+\").replace(/Key/g, \"\").replace(/Digit/g, \"\");\n    var lastFocusedElementRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    var isFocusWithinRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    var removeToast = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(toastToRemove) {\n        setToasts(function(toasts) {\n            var _toasts_find;\n            if (!((_toasts_find = toasts.find(function(toast) {\n                return toast.id === toastToRemove.id;\n            })) == null ? void 0 : _toasts_find[\"delete\"])) {\n                ToastState.dismiss(toastToRemove.id);\n            }\n            return toasts.filter(function(_ref4) {\n                var id = _ref4.id;\n                return id !== toastToRemove.id;\n            });\n        });\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        return ToastState.subscribe(function(toast) {\n            if (toast.dismiss) {\n                // Prevent batching of other state updates\n                requestAnimationFrame(function() {\n                    setToasts(function(toasts) {\n                        return toasts.map(function(t) {\n                            return t.id === toast.id ? _objectSpread(_objectSpread({}, t), {}, {\n                                \"delete\": true\n                            }) : t;\n                        });\n                    });\n                });\n                return;\n            }\n            // Prevent batching, temp solution.\n            setTimeout(function() {\n                react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync(function() {\n                    setToasts(function(toasts) {\n                        var indexOfExistingToast = toasts.findIndex(function(t) {\n                            return t.id === toast.id;\n                        });\n                        // Update the toast if it already exists\n                        if (indexOfExistingToast !== -1) {\n                            return [].concat(_toConsumableArray(toasts.slice(0, indexOfExistingToast)), [\n                                _objectSpread(_objectSpread({}, toasts[indexOfExistingToast]), toast)\n                            ], _toConsumableArray(toasts.slice(indexOfExistingToast + 1)));\n                        }\n                        return [\n                            toast\n                        ].concat(_toConsumableArray(toasts));\n                    });\n                });\n            });\n        });\n    }, [\n        toasts\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        if (theme !== \"system\") {\n            setActualTheme(theme);\n            return;\n        }\n        if (theme === \"system\") {\n            // check if current preference is dark\n            if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n                // it's currently dark\n                setActualTheme(\"dark\");\n            } else {\n                // it's not dark\n                setActualTheme(\"light\");\n            }\n        }\n        if (true) return;\n        var darkMediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        try {\n            // Chrome & Firefox\n            darkMediaQuery.addEventListener(\"change\", function(_ref5) {\n                var matches = _ref5.matches;\n                if (matches) {\n                    setActualTheme(\"dark\");\n                } else {\n                    setActualTheme(\"light\");\n                }\n            });\n        } catch (error) {\n            // Safari < 14\n            darkMediaQuery.addListener(function(_ref6) {\n                var matches = _ref6.matches;\n                try {\n                    if (matches) {\n                        setActualTheme(\"dark\");\n                    } else {\n                        setActualTheme(\"light\");\n                    }\n                } catch (e) {\n                    console.error(e);\n                }\n            });\n        }\n    }, [\n        theme\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        // Ensure expanded is always false when no toasts are present / only one left\n        if (toasts.length <= 1) {\n            setExpanded(false);\n        }\n    }, [\n        toasts\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        var handleKeyDown = function handleKeyDown(event) {\n            var _listRef_current;\n            var isHotkeyPressed = hotkey.every(function(key) {\n                return event[key] || event.code === key;\n            });\n            if (isHotkeyPressed) {\n                var _listRef_current1;\n                setExpanded(true);\n                (_listRef_current1 = listRef.current) == null ? void 0 : _listRef_current1.focus();\n            }\n            if (event.code === \"Escape\" && (document.activeElement === listRef.current || ((_listRef_current = listRef.current) == null ? void 0 : _listRef_current.contains(document.activeElement)))) {\n                setExpanded(false);\n            }\n        };\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return function() {\n            return document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [\n        hotkey\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        if (listRef.current) {\n            return function() {\n                if (lastFocusedElementRef.current) {\n                    lastFocusedElementRef.current.focus({\n                        preventScroll: true\n                    });\n                    lastFocusedElementRef.current = null;\n                    isFocusWithinRef.current = false;\n                }\n            };\n        }\n    }, [\n        listRef.current\n    ]);\n    return(// Remove item from normal navigation flow, only available via hotkey\n    /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", {\n        ref: ref,\n        \"aria-label\": \"\".concat(containerAriaLabel, \" \").concat(hotkeyLabel),\n        tabIndex: -1,\n        \"aria-live\": \"polite\",\n        \"aria-relevant\": \"additions text\",\n        \"aria-atomic\": \"false\",\n        suppressHydrationWarning: true\n    }, possiblePositions.map(function(position, index) {\n        var _heights_;\n        var _position$split5 = position.split(\"-\"), _position$split6 = _slicedToArray(_position$split5, 2), y = _position$split6[0], x = _position$split6[1];\n        if (!toasts.length) return null;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ol\", {\n            key: position,\n            dir: dir === \"auto\" ? getDocumentDirection() : dir,\n            tabIndex: -1,\n            ref: listRef,\n            className: className,\n            \"data-sonner-toaster\": true,\n            \"data-sonner-theme\": actualTheme,\n            \"data-y-position\": y,\n            \"data-x-position\": x,\n            style: _objectSpread(_objectSpread({\n                \"--front-toast-height\": \"\".concat(((_heights_ = heights[0]) == null ? void 0 : _heights_.height) || 0, \"px\"),\n                \"--width\": \"\".concat(TOAST_WIDTH, \"px\"),\n                \"--gap\": \"\".concat(gap, \"px\")\n            }, style), assignOffset(offset, mobileOffset)),\n            onBlur: function onBlur(event) {\n                if (isFocusWithinRef.current && !event.currentTarget.contains(event.relatedTarget)) {\n                    isFocusWithinRef.current = false;\n                    if (lastFocusedElementRef.current) {\n                        lastFocusedElementRef.current.focus({\n                            preventScroll: true\n                        });\n                        lastFocusedElementRef.current = null;\n                    }\n                }\n            },\n            onFocus: function onFocus(event) {\n                var isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === \"false\";\n                if (isNotDismissible) return;\n                if (!isFocusWithinRef.current) {\n                    isFocusWithinRef.current = true;\n                    lastFocusedElementRef.current = event.relatedTarget;\n                }\n            },\n            onMouseEnter: function onMouseEnter() {\n                return setExpanded(true);\n            },\n            onMouseMove: function onMouseMove() {\n                return setExpanded(true);\n            },\n            onMouseLeave: function onMouseLeave() {\n                // Avoid setting expanded to false when interacting with a toast, e.g. swiping\n                if (!interacting) {\n                    setExpanded(false);\n                }\n            },\n            onDragEnd: function onDragEnd() {\n                return setExpanded(false);\n            },\n            onPointerDown: function onPointerDown(event) {\n                var isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === \"false\";\n                if (isNotDismissible) return;\n                setInteracting(true);\n            },\n            onPointerUp: function onPointerUp() {\n                return setInteracting(false);\n            }\n        }, toasts.filter(function(toast) {\n            return !toast.position && index === 0 || toast.position === position;\n        }).map(function(toast, index) {\n            var _toastOptions_duration, _toastOptions_closeButton;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Toast, {\n                key: toast.id,\n                icons: icons,\n                index: index,\n                toast: toast,\n                defaultRichColors: richColors,\n                duration: (_toastOptions_duration = toastOptions == null ? void 0 : toastOptions.duration) != null ? _toastOptions_duration : duration,\n                className: toastOptions == null ? void 0 : toastOptions.className,\n                descriptionClassName: toastOptions == null ? void 0 : toastOptions.descriptionClassName,\n                invert: invert,\n                visibleToasts: visibleToasts,\n                closeButton: (_toastOptions_closeButton = toastOptions == null ? void 0 : toastOptions.closeButton) != null ? _toastOptions_closeButton : closeButton,\n                interacting: interacting,\n                position: position,\n                style: toastOptions == null ? void 0 : toastOptions.style,\n                unstyled: toastOptions == null ? void 0 : toastOptions.unstyled,\n                classNames: toastOptions == null ? void 0 : toastOptions.classNames,\n                cancelButtonStyle: toastOptions == null ? void 0 : toastOptions.cancelButtonStyle,\n                actionButtonStyle: toastOptions == null ? void 0 : toastOptions.actionButtonStyle,\n                closeButtonAriaLabel: toastOptions == null ? void 0 : toastOptions.closeButtonAriaLabel,\n                removeToast: removeToast,\n                toasts: toasts.filter(function(t) {\n                    return t.position == toast.position;\n                }),\n                heights: heights.filter(function(h) {\n                    return h.position == toast.position;\n                }),\n                setHeights: setHeights,\n                expandByDefault: expand,\n                gap: gap,\n                expanded: expanded,\n                swipeDirections: props.swipeDirections\n            });\n        }));\n    })));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sonner/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/sonner/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/sonner/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Toaster: () => (/* binding */ e0),
/* harmony export */   toast: () => (/* binding */ e1),
/* harmony export */   useSonner: () => (/* binding */ e2)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\kevin\Desktop\new gensoft\Front-Student\node_modules\sonner\dist\index.mjs#Toaster`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\kevin\Desktop\new gensoft\Front-Student\node_modules\sonner\dist\index.mjs#toast`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\kevin\Desktop\new gensoft\Front-Student\node_modules\sonner\dist\index.mjs#useSonner`);


/***/ })

};
;